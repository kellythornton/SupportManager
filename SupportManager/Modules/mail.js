// This module sends an email to the recipients to let them know that a new ticket has been created.  It passes the ticket number, name of the creator and a summary of the problem.// The email is sent by greatnorthwest@localboise.com. //This function decides to to send emails to based on who has a vested interest in the ticket or project.//exports.emailToList = function emailToList(mailList) {//	this.mailList = mailList;//	emailList = "kelly.thornton@greatnorthwest.com";//	//	switch (mailList) {//		case "Kelly Thornton"://			emailList = emailList + , +"kellenthorne@gmail.com";//		case "Mr. Test User"://			emailList = emailList + , "kelly@localboise.com";//			break;//		}//	return {" "};//}// Initialize variables from paramaters passed to the function by the newticket.js script.exports.sendUpdateEmail = function sendUpdateEmail(idNumber, mailSummary, createdByName, mailType, notes){	this.idNumber = idNumber;	this.summary = mailSummary;	this.createdBy = createdByName;	this.mailType = mailType;  //can be newTicket, modifiedTicket, newProject, modifiedProject, ticketNote or projectNote.	this.notes = notes;		// Setup the email variables	var mail = require("waf-mail/mail");var message = new mail.Mail();message.subject = "Great Northwest Support Portal";message.from = "greatnorthwest@localboise.com";message.to = "kelly.thornton@greatnorthwest.com";//Decide which message to send in the emailswitch (mailType) {	case "newTicket":		message.setContent("A new support ticket has been created by " + createdBy + " on the Great Northwest Support Portal.\n\nTicket Summary: " + summary);		break;	case "modifiedTicket":		message.setContent("Ticket number " + idNumber + " has been updated by " + createdBy + "\n\nTicket Summary: " + summary);		break;	case "newProject":		message.setContent("A new project has been created by " + createdBy + " on the Great Northwest Support Portal.\n\nProject Summary: " + summary);		break;	case "modifiedProject":		message.setContent("Project numbeer " + idNumber + " has been updated by " + createdBy + " on the Great Northwest Support Portal.\n\nProject Summary: " + summary);		break;	case "ticketNote":		message.setContent("A new note has been added to ticket number " + idNumber + ".\n\nTicket summary: " + summary + "\n\nNotes: " + notes);		break;	case "projectNote":		message.setContent("A new note has been added to project number " + idNumber + ".\n\nProject summary: " + summary + "\n\nNotes: " + notes);		break;	case "ticketDeleted":		message.setContent("Ticket number " + idNumber + " has been deleted by " + createdBy);		break;	case "projectDeleted":		message.setContent("Project number " + idNumber + " has been deleted by " + createdBy);		break;	}	 //send the email messagesendEmail({    address: "smtpout.secureserver.net",    port: 465,    isSSL: true,    domain: "localboise.com",    user: "greatnorthwest@localboise.com",    password: "1qaz2wsx"}, message);} // Authenticate email address and check for errors.  If authentication passes and no errors are found then send the email.function sendEmail(config, message) {    "use strict";     var smtp = require("waf-mail/smtp"),        client,        errName,        errInfo,        isSent;     //init error tracking    errName = "";    errInfo = [];     //connect    client = new smtp.SMTP();    client.connect(config.address, config.port, config.isSSL, config.domain, function onAfterConnect(isConnected, replyArr, isESMTP) {        if (isConnected) {             //authenticate            client.authenticate(config.user, config.password, function onAfterAuthenticate(isAuthenticated, replyArr) {                if (isAuthenticated) {                     //send                    client.send(message.from, message.to, message, function onAfterSend(isSent, replyArr) {                        if (isSent) {                            exitWait();                        } else {                            errName = "smtp_SendFailed";                            errInfo = replyArr;                            exitWait();                        }                    });                } else {                    errName = "smtp_AuthFailed";                    errInfo = replyArr;                    exitWait();                }            });        } else {            errName = "smtp_CouldNotConnect";            errInfo = replyArr;            exitWait();        }    });    wait();     //determine if sent    if (errName === "") {        isSent = true;    } else {        isSent = false;    }     //return if sent and any error info    return {        isSent: isSent,        errName: errName,        errInfo: errInfo    };}